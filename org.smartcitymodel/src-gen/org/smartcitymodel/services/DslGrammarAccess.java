/*
 * generated by Xtext 2.36.0
 */
package org.smartcitymodel.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class DslGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class SmartCityModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smartcitymodel.Dsl.SmartCityModel");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cEntitiesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cEntitiesEntityParserRuleCall_0_0 = (RuleCall)cEntitiesAssignment_0.eContents().get(0);
		private final Assignment cConnectionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConnectionsConnectionParserRuleCall_1_0 = (RuleCall)cConnectionsAssignment_1.eContents().get(0);
		
		///*
		// * TODO: add scoping for Port references
		// * TODO: add validation for Port references (source must be out, target must be in, units and types must be the identical)
		// * TODO: add scoping for ports in actions
		// *             - checked ports (values) need to be input ports, set values need to be output ports
		// *          - set ports (values) need to be output ports
		// * TODO: all kinds of validations for conditions
		// * TODO: all kinds of validation for expressions
		// * TODO: all kinds of validations for effects
		// * TODO: all kinds of validation for properties and their usage
		// *             - i.e., read or write
		// * TODO: add scoping for properties
		// */
		//SmartCityModel:
		//    (entities+=Entity)*
		//    (connections+=Connection)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(entities+=Entity)*
		//(connections+=Connection)*
		public Group getGroup() { return cGroup; }
		
		//(entities+=Entity)*
		public Assignment getEntitiesAssignment_0() { return cEntitiesAssignment_0; }
		
		//Entity
		public RuleCall getEntitiesEntityParserRuleCall_0_0() { return cEntitiesEntityParserRuleCall_0_0; }
		
		//(connections+=Connection)*
		public Assignment getConnectionsAssignment_1() { return cConnectionsAssignment_1; }
		
		//Connection
		public RuleCall getConnectionsConnectionParserRuleCall_1_0() { return cConnectionsConnectionParserRuleCall_1_0; }
	}
	public class EntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smartcitymodel.Dsl.Entity");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSensorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cActorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cControllerParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cCompoundEntityParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//Entity:
		//    Sensor | Actor | Controller | CompoundEntity;
		@Override public ParserRule getRule() { return rule; }
		
		//Sensor | Actor | Controller | CompoundEntity
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Sensor
		public RuleCall getSensorParserRuleCall_0() { return cSensorParserRuleCall_0; }
		
		//Actor
		public RuleCall getActorParserRuleCall_1() { return cActorParserRuleCall_1; }
		
		//Controller
		public RuleCall getControllerParserRuleCall_2() { return cControllerParserRuleCall_2; }
		
		//CompoundEntity
		public RuleCall getCompoundEntityParserRuleCall_3() { return cCompoundEntityParserRuleCall_3; }
	}
	public class SensorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smartcitymodel.Dsl.Sensor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSensorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesPropertyParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		private final Assignment cPortsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPortsPortParserRuleCall_4_0 = (RuleCall)cPortsAssignment_4.eContents().get(0);
		private final Assignment cFrequencyAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cFrequencyFrequencyParserRuleCall_5_0 = (RuleCall)cFrequencyAssignment_5.eContents().get(0);
		private final Assignment cLocationAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLocationLocationParserRuleCall_6_0 = (RuleCall)cLocationAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Sensor:
		//    'sensor' name=ID '{'
		//        (properties+=Property)*
		//        (ports+=Port)+
		//        (frequency=Frequency)?
		//        location=Location
		//    '}';
		@Override public ParserRule getRule() { return rule; }
		
		//'sensor' name=ID '{'
		//    (properties+=Property)*
		//    (ports+=Port)+
		//    (frequency=Frequency)?
		//    location=Location
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'sensor'
		public Keyword getSensorKeyword_0() { return cSensorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(properties+=Property)*
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_3_0() { return cPropertiesPropertyParserRuleCall_3_0; }
		
		//(ports+=Port)+
		public Assignment getPortsAssignment_4() { return cPortsAssignment_4; }
		
		//Port
		public RuleCall getPortsPortParserRuleCall_4_0() { return cPortsPortParserRuleCall_4_0; }
		
		//(frequency=Frequency)?
		public Assignment getFrequencyAssignment_5() { return cFrequencyAssignment_5; }
		
		//Frequency
		public RuleCall getFrequencyFrequencyParserRuleCall_5_0() { return cFrequencyFrequencyParserRuleCall_5_0; }
		
		//location=Location
		public Assignment getLocationAssignment_6() { return cLocationAssignment_6; }
		
		//Location
		public RuleCall getLocationLocationParserRuleCall_6_0() { return cLocationLocationParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ActorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smartcitymodel.Dsl.Actor");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesPropertyParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		private final Assignment cPortsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPortsPortParserRuleCall_4_0 = (RuleCall)cPortsAssignment_4.eContents().get(0);
		private final Assignment cActionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cActionsActionParserRuleCall_5_0 = (RuleCall)cActionsAssignment_5.eContents().get(0);
		private final Assignment cLocationAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLocationLocationParserRuleCall_6_0 = (RuleCall)cLocationAssignment_6.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//Actor:
		//    'actor' name=ID '{'
		//        (properties+=Property)*
		//        (ports+=Port)+
		//        (actions+=Action)*
		//        location=Location
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'actor' name=ID '{'
		//    (properties+=Property)*
		//    (ports+=Port)+
		//    (actions+=Action)*
		//    location=Location
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'actor'
		public Keyword getActorKeyword_0() { return cActorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(properties+=Property)*
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_3_0() { return cPropertiesPropertyParserRuleCall_3_0; }
		
		//(ports+=Port)+
		public Assignment getPortsAssignment_4() { return cPortsAssignment_4; }
		
		//Port
		public RuleCall getPortsPortParserRuleCall_4_0() { return cPortsPortParserRuleCall_4_0; }
		
		//(actions+=Action)*
		public Assignment getActionsAssignment_5() { return cActionsAssignment_5; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_5_0() { return cActionsActionParserRuleCall_5_0; }
		
		//location=Location
		public Assignment getLocationAssignment_6() { return cLocationAssignment_6; }
		
		//Location
		public RuleCall getLocationLocationParserRuleCall_6_0() { return cLocationLocationParserRuleCall_6_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_7() { return cRightCurlyBracketKeyword_7; }
	}
	public class ControllerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smartcitymodel.Dsl.Controller");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cControllerKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesPropertyParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		private final Assignment cPortsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPortsPortParserRuleCall_4_0 = (RuleCall)cPortsAssignment_4.eContents().get(0);
		private final Assignment cActionsAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cActionsActionParserRuleCall_5_0 = (RuleCall)cActionsAssignment_5.eContents().get(0);
		private final Assignment cServicesAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cServicesServiceParserRuleCall_6_0 = (RuleCall)cServicesAssignment_6.eContents().get(0);
		private final Assignment cLocationAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cLocationLocationParserRuleCall_7_0 = (RuleCall)cLocationAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//Controller:
		//    'controller' name=ID '{'
		//        (properties+=Property)*
		//        (ports+=Port)+
		//        (actions+=Action)*
		//        (services+=Service)*
		//        location=Location
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'controller' name=ID '{'
		//    (properties+=Property)*
		//    (ports+=Port)+
		//    (actions+=Action)*
		//    (services+=Service)*
		//    location=Location
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'controller'
		public Keyword getControllerKeyword_0() { return cControllerKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(properties+=Property)*
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }
		
		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_3_0() { return cPropertiesPropertyParserRuleCall_3_0; }
		
		//(ports+=Port)+
		public Assignment getPortsAssignment_4() { return cPortsAssignment_4; }
		
		//Port
		public RuleCall getPortsPortParserRuleCall_4_0() { return cPortsPortParserRuleCall_4_0; }
		
		//(actions+=Action)*
		public Assignment getActionsAssignment_5() { return cActionsAssignment_5; }
		
		//Action
		public RuleCall getActionsActionParserRuleCall_5_0() { return cActionsActionParserRuleCall_5_0; }
		
		//(services+=Service)*
		public Assignment getServicesAssignment_6() { return cServicesAssignment_6; }
		
		//Service
		public RuleCall getServicesServiceParserRuleCall_6_0() { return cServicesServiceParserRuleCall_6_0; }
		
		//location=Location
		public Assignment getLocationAssignment_7() { return cLocationAssignment_7; }
		
		//Location
		public RuleCall getLocationLocationParserRuleCall_7_0() { return cLocationLocationParserRuleCall_7_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}
	public class CompoundEntityElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smartcitymodel.Dsl.CompoundEntity");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStructureKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSensorsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSensorsSensorParserRuleCall_3_0 = (RuleCall)cSensorsAssignment_3.eContents().get(0);
		private final Assignment cActorsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cActorsActorParserRuleCall_4_0 = (RuleCall)cActorsAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//CompoundEntity:
		//    'structure' name=ID '{'
		//        (sensors+=Sensor)*
		//        (actors+=Actor)*
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'structure' name=ID '{'
		//    (sensors+=Sensor)*
		//    (actors+=Actor)*
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'structure'
		public Keyword getStructureKeyword_0() { return cStructureKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(sensors+=Sensor)*
		public Assignment getSensorsAssignment_3() { return cSensorsAssignment_3; }
		
		//Sensor
		public RuleCall getSensorsSensorParserRuleCall_3_0() { return cSensorsSensorParserRuleCall_3_0; }
		
		//(actors+=Actor)*
		public Assignment getActorsAssignment_4() { return cActorsAssignment_4; }
		
		//Actor
		public RuleCall getActorsActorParserRuleCall_4_0() { return cActorsActorParserRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smartcitymodel.Dsl.Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPropertyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cTypeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cTypeTYPEEnumRuleCall_3_0 = (RuleCall)cTypeAssignment_3.eContents().get(0);
		private final Assignment cAccessAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAccessACCESSEnumRuleCall_4_0 = (RuleCall)cAccessAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//Property:
		//    'property' name=ID '{'
		//        type=TYPE
		//        access=ACCESS
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'property' name=ID '{'
		//    type=TYPE
		//    access=ACCESS
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'property'
		public Keyword getPropertyKeyword_0() { return cPropertyKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//type=TYPE
		public Assignment getTypeAssignment_3() { return cTypeAssignment_3; }
		
		//TYPE
		public RuleCall getTypeTYPEEnumRuleCall_3_0() { return cTypeTYPEEnumRuleCall_3_0; }
		
		//access=ACCESS
		public Assignment getAccessAssignment_4() { return cAccessAssignment_4; }
		
		//ACCESS
		public RuleCall getAccessACCESSEnumRuleCall_4_0() { return cAccessACCESSEnumRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class PortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smartcitymodel.Dsl.Port");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPortKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIdAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIdINTTerminalRuleCall_1_0 = (RuleCall)cIdAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cDirectionKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cDirectionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDirectionDIRECTIONEnumRuleCall_4_0 = (RuleCall)cDirectionAssignment_4.eContents().get(0);
		private final Keyword cTypeKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cTypeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cTypeTYPEEnumRuleCall_6_0 = (RuleCall)cTypeAssignment_6.eContents().get(0);
		private final Keyword cUnitKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cUnitAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cUnitUNITEnumRuleCall_8_0 = (RuleCall)cUnitAssignment_8.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_9 = (Keyword)cGroup.eContents().get(9);
		
		//Port:
		//    'port' id=INT '{'
		//        'direction' direction=DIRECTION
		//        'type' type=TYPE
		//        'unit' unit=UNIT
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'port' id=INT '{'
		//    'direction' direction=DIRECTION
		//    'type' type=TYPE
		//    'unit' unit=UNIT
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'port'
		public Keyword getPortKeyword_0() { return cPortKeyword_0; }
		
		//id=INT
		public Assignment getIdAssignment_1() { return cIdAssignment_1; }
		
		//INT
		public RuleCall getIdINTTerminalRuleCall_1_0() { return cIdINTTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//'direction'
		public Keyword getDirectionKeyword_3() { return cDirectionKeyword_3; }
		
		//direction=DIRECTION
		public Assignment getDirectionAssignment_4() { return cDirectionAssignment_4; }
		
		//DIRECTION
		public RuleCall getDirectionDIRECTIONEnumRuleCall_4_0() { return cDirectionDIRECTIONEnumRuleCall_4_0; }
		
		//'type'
		public Keyword getTypeKeyword_5() { return cTypeKeyword_5; }
		
		//type=TYPE
		public Assignment getTypeAssignment_6() { return cTypeAssignment_6; }
		
		//TYPE
		public RuleCall getTypeTYPEEnumRuleCall_6_0() { return cTypeTYPEEnumRuleCall_6_0; }
		
		//'unit'
		public Keyword getUnitKeyword_7() { return cUnitKeyword_7; }
		
		//unit=UNIT
		public Assignment getUnitAssignment_8() { return cUnitAssignment_8; }
		
		//UNIT
		public RuleCall getUnitUNITEnumRuleCall_8_0() { return cUnitUNITEnumRuleCall_8_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_9() { return cRightCurlyBracketKeyword_9; }
	}
	public class LocationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smartcitymodel.Dsl.Location");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLocationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLongitudeKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cLongitudeAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cLongitudeFLOATParserRuleCall_3_0 = (RuleCall)cLongitudeAssignment_3.eContents().get(0);
		private final Keyword cDegreesKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Keyword cLatitudeKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cLatitudeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cLatitudeFLOATParserRuleCall_6_0 = (RuleCall)cLatitudeAssignment_6.eContents().get(0);
		private final Keyword cDegreesKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cAltitudeKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Assignment cAltitudeAssignment_9 = (Assignment)cGroup.eContents().get(9);
		private final RuleCall cAltitudeFLOATParserRuleCall_9_0 = (RuleCall)cAltitudeAssignment_9.eContents().get(0);
		private final Keyword cMetersKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Keyword cRightCurlyBracketKeyword_11 = (Keyword)cGroup.eContents().get(11);
		
		//Location:
		//    'location' '{'
		//        'longitude' longitude=FLOAT 'degrees'
		//        'latitude' latitude=FLOAT 'degrees'
		//        'altitude' altitude=FLOAT 'meters'
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'location' '{'
		//    'longitude' longitude=FLOAT 'degrees'
		//    'latitude' latitude=FLOAT 'degrees'
		//    'altitude' altitude=FLOAT 'meters'
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'location'
		public Keyword getLocationKeyword_0() { return cLocationKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'longitude'
		public Keyword getLongitudeKeyword_2() { return cLongitudeKeyword_2; }
		
		//longitude=FLOAT
		public Assignment getLongitudeAssignment_3() { return cLongitudeAssignment_3; }
		
		//FLOAT
		public RuleCall getLongitudeFLOATParserRuleCall_3_0() { return cLongitudeFLOATParserRuleCall_3_0; }
		
		//'degrees'
		public Keyword getDegreesKeyword_4() { return cDegreesKeyword_4; }
		
		//'latitude'
		public Keyword getLatitudeKeyword_5() { return cLatitudeKeyword_5; }
		
		//latitude=FLOAT
		public Assignment getLatitudeAssignment_6() { return cLatitudeAssignment_6; }
		
		//FLOAT
		public RuleCall getLatitudeFLOATParserRuleCall_6_0() { return cLatitudeFLOATParserRuleCall_6_0; }
		
		//'degrees'
		public Keyword getDegreesKeyword_7() { return cDegreesKeyword_7; }
		
		//'altitude'
		public Keyword getAltitudeKeyword_8() { return cAltitudeKeyword_8; }
		
		//altitude=FLOAT
		public Assignment getAltitudeAssignment_9() { return cAltitudeAssignment_9; }
		
		//FLOAT
		public RuleCall getAltitudeFLOATParserRuleCall_9_0() { return cAltitudeFLOATParserRuleCall_9_0; }
		
		//'meters'
		public Keyword getMetersKeyword_10() { return cMetersKeyword_10; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_11() { return cRightCurlyBracketKeyword_11; }
	}
	public class FrequencyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smartcitymodel.Dsl.Frequency");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cFrequencyKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cEveryKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueINTTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		private final Assignment cUnitAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cUnitTIMEEnumRuleCall_4_0 = (RuleCall)cUnitAssignment_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// -1 means values are pushed, other pulled at specified interval after start
		//Frequency:
		//    'frequency' '{'
		//        'every' value=INT unit=TIME
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'frequency' '{'
		//    'every' value=INT unit=TIME
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'frequency'
		public Keyword getFrequencyKeyword_0() { return cFrequencyKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//'every'
		public Keyword getEveryKeyword_2() { return cEveryKeyword_2; }
		
		//value=INT
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_3_0() { return cValueINTTerminalRuleCall_3_0; }
		
		//unit=TIME
		public Assignment getUnitAssignment_4() { return cUnitAssignment_4; }
		
		//TIME
		public RuleCall getUnitTIMEEnumRuleCall_4_0() { return cUnitTIMEEnumRuleCall_4_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5() { return cRightCurlyBracketKeyword_5; }
	}
	public class ActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smartcitymodel.Dsl.Action");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cActionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStmtsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStmtsStatementParserRuleCall_3_0 = (RuleCall)cStmtsAssignment_3.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//// specifies internal behavior
		//Action:
		//    'action' name=ID '{'
		//        (stmts+=Statement)+
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'action' name=ID '{'
		//    (stmts+=Statement)+
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'action'
		public Keyword getActionKeyword_0() { return cActionKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//(stmts+=Statement)+
		public Assignment getStmtsAssignment_3() { return cStmtsAssignment_3; }
		
		//Statement
		public RuleCall getStmtsStatementParserRuleCall_3_0() { return cStmtsStatementParserRuleCall_3_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4() { return cRightCurlyBracketKeyword_4; }
	}
	public class StatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smartcitymodel.Dsl.Statement");
		private final RuleCall cConditionalStatementParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Statement:
		//    ConditionalStatement
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ConditionalStatement
		public RuleCall getConditionalStatementParserRuleCall() { return cConditionalStatementParserRuleCall; }
	}
	public class ConditionalStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smartcitymodel.Dsl.ConditionalStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cConditionAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cConditionConditionParserRuleCall_1_0 = (RuleCall)cConditionAssignment_1.eContents().get(0);
		private final Keyword cThenKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cEffectAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cEffectEffectParserRuleCall_3_0 = (RuleCall)cEffectAssignment_3.eContents().get(0);
		private final Keyword cSemicolonKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//ConditionalStatement:
		//    "if" condition=Condition 'then' effect=Effect';'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"if" condition=Condition 'then' effect=Effect';'
		public Group getGroup() { return cGroup; }
		
		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }
		
		//condition=Condition
		public Assignment getConditionAssignment_1() { return cConditionAssignment_1; }
		
		//Condition
		public RuleCall getConditionConditionParserRuleCall_1_0() { return cConditionConditionParserRuleCall_1_0; }
		
		//'then'
		public Keyword getThenKeyword_2() { return cThenKeyword_2; }
		
		//effect=Effect
		public Assignment getEffectAssignment_3() { return cEffectAssignment_3; }
		
		//Effect
		public RuleCall getEffectEffectParserRuleCall_3_0() { return cEffectEffectParserRuleCall_3_0; }
		
		//';'
		public Keyword getSemicolonKeyword_4() { return cSemicolonKeyword_4; }
	}
	public class ConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smartcitymodel.Dsl.Condition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Assignment cTargetAssignment_0 = (Assignment)cAlternatives.eContents().get(0);
		private final RuleCall cTargetPortFQNParserRuleCall_0_0 = (RuleCall)cTargetAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cPropertyFQNParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final RuleCall cCOMPTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		private final Assignment cExprAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final Alternatives cExprAlternatives_1_2_0 = (Alternatives)cExprAssignment_1_2.eContents().get(0);
		private final RuleCall cExprPortFQNParserRuleCall_1_2_0_0 = (RuleCall)cExprAlternatives_1_2_0.eContents().get(0);
		private final RuleCall cExprExpressionParserRuleCall_1_2_0_1 = (RuleCall)cExprAlternatives_1_2_0.eContents().get(1);
		
		//Condition:
		//     target=PortFQN|PropertyFQN COMP expr=(PortFQN|Expression)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//target=PortFQN|PropertyFQN COMP expr=(PortFQN|Expression)
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//target=PortFQN
		public Assignment getTargetAssignment_0() { return cTargetAssignment_0; }
		
		//PortFQN
		public RuleCall getTargetPortFQNParserRuleCall_0_0() { return cTargetPortFQNParserRuleCall_0_0; }
		
		//PropertyFQN COMP expr=(PortFQN|Expression)
		public Group getGroup_1() { return cGroup_1; }
		
		//PropertyFQN
		public RuleCall getPropertyFQNParserRuleCall_1_0() { return cPropertyFQNParserRuleCall_1_0; }
		
		//COMP
		public RuleCall getCOMPTerminalRuleCall_1_1() { return cCOMPTerminalRuleCall_1_1; }
		
		//expr=(PortFQN|Expression)
		public Assignment getExprAssignment_1_2() { return cExprAssignment_1_2; }
		
		//(PortFQN|Expression)
		public Alternatives getExprAlternatives_1_2_0() { return cExprAlternatives_1_2_0; }
		
		//PortFQN
		public RuleCall getExprPortFQNParserRuleCall_1_2_0_0() { return cExprPortFQNParserRuleCall_1_2_0_0; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_2_0_1() { return cExprExpressionParserRuleCall_1_2_0_1; }
	}
	public class EffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smartcitymodel.Dsl.Effect");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cSetKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Assignment cTargetAssignment_0_1 = (Assignment)cGroup_0.eContents().get(1);
		private final RuleCall cTargetPortFQNParserRuleCall_0_1_0 = (RuleCall)cTargetAssignment_0_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final RuleCall cPropertyFQNParserRuleCall_1_0 = (RuleCall)cGroup_1.eContents().get(0);
		private final Keyword cToKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cExprAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cExprExpressionParserRuleCall_1_2_0 = (RuleCall)cExprAssignment_1_2.eContents().get(0);
		
		//Effect:
		//    'set' target=PortFQN|PropertyFQN 'to' expr=Expression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'set' target=PortFQN|PropertyFQN 'to' expr=Expression
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'set' target=PortFQN
		public Group getGroup_0() { return cGroup_0; }
		
		//'set'
		public Keyword getSetKeyword_0_0() { return cSetKeyword_0_0; }
		
		//target=PortFQN
		public Assignment getTargetAssignment_0_1() { return cTargetAssignment_0_1; }
		
		//PortFQN
		public RuleCall getTargetPortFQNParserRuleCall_0_1_0() { return cTargetPortFQNParserRuleCall_0_1_0; }
		
		//PropertyFQN 'to' expr=Expression
		public Group getGroup_1() { return cGroup_1; }
		
		//PropertyFQN
		public RuleCall getPropertyFQNParserRuleCall_1_0() { return cPropertyFQNParserRuleCall_1_0; }
		
		//'to'
		public Keyword getToKeyword_1_1() { return cToKeyword_1_1; }
		
		//expr=Expression
		public Assignment getExprAssignment_1_2() { return cExprAssignment_1_2; }
		
		//Expression
		public RuleCall getExprExpressionParserRuleCall_1_2_0() { return cExprExpressionParserRuleCall_1_2_0; }
	}
	public class ExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smartcitymodel.Dsl.Expression");
		private final RuleCall cValueExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//Expression:
		//    ValueExpression
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ValueExpression
		public RuleCall getValueExpressionParserRuleCall() { return cValueExpressionParserRuleCall; }
	}
	public class ValueExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smartcitymodel.Dsl.ValueExpression");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cFLOATParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSTRINGTerminalRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBOOLEANParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//ValueExpression:
		//    INT|FLOAT|STRING|BOOLEAN
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//INT|FLOAT|STRING|BOOLEAN
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//FLOAT
		public RuleCall getFLOATParserRuleCall_1() { return cFLOATParserRuleCall_1; }
		
		//STRING
		public RuleCall getSTRINGTerminalRuleCall_2() { return cSTRINGTerminalRuleCall_2; }
		
		//BOOLEAN
		public RuleCall getBOOLEANParserRuleCall_3() { return cBOOLEANParserRuleCall_3; }
	}
	public class ServiceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smartcitymodel.Dsl.Service");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cServiceKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//// specifies external API calls
		//Service:
		//    'service' name=ID '{'
		//        // input
		//        //how to specify services - and who offers these`?
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'service' name=ID '{'
		//    // input
		//    //how to specify services - and who offers these`?
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'service'
		public Keyword getServiceKeyword_0() { return cServiceKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//    // input
		//    //how to specify services - and who offers these`?
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
	}
	public class ConnectionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smartcitymodel.Dsl.Connection");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cConnectionKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cSourceRefAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSourceRefPortFQNParserRuleCall_3_0 = (RuleCall)cSourceRefAssignment_3.eContents().get(0);
		private final Keyword cHyphenMinusGreaterThanSignKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cTargetRefAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cTargetRefPortFQNParserRuleCall_5_0 = (RuleCall)cTargetRefAssignment_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//Connection:
		//    'connection' name =ID '{'
		//        sourceRef=PortFQN '->' targetRef=PortFQN
		//    '}'
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'connection' name =ID '{'
		//    sourceRef=PortFQN '->' targetRef=PortFQN
		//'}'
		public Group getGroup() { return cGroup; }
		
		//'connection'
		public Keyword getConnectionKeyword_0() { return cConnectionKeyword_0; }
		
		//name =ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_2() { return cLeftCurlyBracketKeyword_2; }
		
		//sourceRef=PortFQN
		public Assignment getSourceRefAssignment_3() { return cSourceRefAssignment_3; }
		
		//PortFQN
		public RuleCall getSourceRefPortFQNParserRuleCall_3_0() { return cSourceRefPortFQNParserRuleCall_3_0; }
		
		//'->'
		public Keyword getHyphenMinusGreaterThanSignKeyword_4() { return cHyphenMinusGreaterThanSignKeyword_4; }
		
		//targetRef=PortFQN
		public Assignment getTargetRefAssignment_5() { return cTargetRefAssignment_5; }
		
		//PortFQN
		public RuleCall getTargetRefPortFQNParserRuleCall_5_0() { return cTargetRefPortFQNParserRuleCall_5_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_6() { return cRightCurlyBracketKeyword_6; }
	}
	public class PortFQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smartcitymodel.Dsl.PortFQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cColonColonKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final RuleCall cINTTerminalRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cColonColonKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Keyword cColonColonKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final RuleCall cINTTerminalRuleCall_1_1_3 = (RuleCall)cGroup_1_1.eContents().get(3);
		
		//PortFQN hidden():
		//    ID('::'INT | '::'ID'::'INT)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ID('::'INT | '::'ID'::'INT)
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('::'INT | '::'ID'::'INT)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'::'INT
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'::'
		public Keyword getColonColonKeyword_1_0_0() { return cColonColonKeyword_1_0_0; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_0_1() { return cINTTerminalRuleCall_1_0_1; }
		
		//'::'ID'::'INT
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'::'
		public Keyword getColonColonKeyword_1_1_0() { return cColonColonKeyword_1_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1_1() { return cIDTerminalRuleCall_1_1_1; }
		
		//'::'
		public Keyword getColonColonKeyword_1_1_2() { return cColonColonKeyword_1_1_2; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_1_1_3() { return cINTTerminalRuleCall_1_1_3; }
	}
	public class PropertyFQNElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smartcitymodel.Dsl.PropertyFQN");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cColonColonKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_0_1 = (RuleCall)cGroup_1_0.eContents().get(1);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cColonColonKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1_1 = (RuleCall)cGroup_1_1.eContents().get(1);
		private final Keyword cColonColonKeyword_1_1_2 = (Keyword)cGroup_1_1.eContents().get(2);
		private final RuleCall cIDTerminalRuleCall_1_1_3 = (RuleCall)cGroup_1_1.eContents().get(3);
		
		//PropertyFQN hidden():
		//    ID('::'ID | '::'ID'::'ID)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//ID('::'ID | '::'ID'::'ID)
		public Group getGroup() { return cGroup; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }
		
		//('::'ID | '::'ID'::'ID)
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//'::'ID
		public Group getGroup_1_0() { return cGroup_1_0; }
		
		//'::'
		public Keyword getColonColonKeyword_1_0_0() { return cColonColonKeyword_1_0_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_0_1() { return cIDTerminalRuleCall_1_0_1; }
		
		//'::'ID'::'ID
		public Group getGroup_1_1() { return cGroup_1_1; }
		
		//'::'
		public Keyword getColonColonKeyword_1_1_0() { return cColonColonKeyword_1_1_0; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1_1() { return cIDTerminalRuleCall_1_1_1; }
		
		//'::'
		public Keyword getColonColonKeyword_1_1_2() { return cColonColonKeyword_1_1_2; }
		
		//ID
		public RuleCall getIDTerminalRuleCall_1_1_3() { return cIDTerminalRuleCall_1_1_3; }
	}
	public class FLOATElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smartcitymodel.Dsl.FLOAT");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final RuleCall cINTTerminalRuleCall_2 = (RuleCall)cGroup.eContents().get(2);
		
		//FLOAT returns ecore::EFloat: INT '.' INT;
		@Override public ParserRule getRule() { return rule; }
		
		//INT '.' INT
		public Group getGroup() { return cGroup; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_0() { return cINTTerminalRuleCall_0; }
		
		//'.'
		public Keyword getFullStopKeyword_1() { return cFullStopKeyword_1; }
		
		//INT
		public RuleCall getINTTerminalRuleCall_2() { return cINTTerminalRuleCall_2; }
	}
	public class BOOLEANElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.smartcitymodel.Dsl.BOOLEAN");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cTrueKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cFalseKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//BOOLEAN returns ecore::EBoolean: 'true' | 'false';
		@Override public ParserRule getRule() { return rule; }
		
		//'true' | 'false'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'true'
		public Keyword getTrueKeyword_0() { return cTrueKeyword_0; }
		
		//'false'
		public Keyword getFalseKeyword_1() { return cFalseKeyword_1; }
	}
	
	public class DIRECTIONElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.smartcitymodel.Dsl.DIRECTION");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cInEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cInInKeyword_0_0 = (Keyword)cInEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOutEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOutOutKeyword_1_0 = (Keyword)cOutEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum DIRECTION: in | out;
		public EnumRule getRule() { return rule; }
		
		//in | out
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//in
		public EnumLiteralDeclaration getInEnumLiteralDeclaration_0() { return cInEnumLiteralDeclaration_0; }
		
		public Keyword getInInKeyword_0_0() { return cInInKeyword_0_0; }
		
		//out
		public EnumLiteralDeclaration getOutEnumLiteralDeclaration_1() { return cOutEnumLiteralDeclaration_1; }
		
		public Keyword getOutOutKeyword_1_0() { return cOutOutKeyword_1_0; }
	}
	public class TYPEElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.smartcitymodel.Dsl.TYPE");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cFloatEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cFloatFloatKeyword_0_0 = (Keyword)cFloatEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cIntegerEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cIntegerIntegerKeyword_1_0 = (Keyword)cIntegerEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cStringEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cStringStringKeyword_2_0 = (Keyword)cStringEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cBoolEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cBoolBoolKeyword_3_0 = (Keyword)cBoolEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum TYPE: float | integer | string | bool;
		public EnumRule getRule() { return rule; }
		
		//float | integer | string | bool
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//float
		public EnumLiteralDeclaration getFloatEnumLiteralDeclaration_0() { return cFloatEnumLiteralDeclaration_0; }
		
		public Keyword getFloatFloatKeyword_0_0() { return cFloatFloatKeyword_0_0; }
		
		//integer
		public EnumLiteralDeclaration getIntegerEnumLiteralDeclaration_1() { return cIntegerEnumLiteralDeclaration_1; }
		
		public Keyword getIntegerIntegerKeyword_1_0() { return cIntegerIntegerKeyword_1_0; }
		
		//string
		public EnumLiteralDeclaration getStringEnumLiteralDeclaration_2() { return cStringEnumLiteralDeclaration_2; }
		
		public Keyword getStringStringKeyword_2_0() { return cStringStringKeyword_2_0; }
		
		//bool
		public EnumLiteralDeclaration getBoolEnumLiteralDeclaration_3() { return cBoolEnumLiteralDeclaration_3; }
		
		public Keyword getBoolBoolKeyword_3_0() { return cBoolBoolKeyword_3_0; }
	}
	public class UNITElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.smartcitymodel.Dsl.UNIT");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cCdEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cCdCdKeyword_0_0 = (Keyword)cCdEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cCEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cCCKeyword_1_0 = (Keyword)cCEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum UNIT: cd | C;
		public EnumRule getRule() { return rule; }
		
		//cd | C
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//cd
		public EnumLiteralDeclaration getCdEnumLiteralDeclaration_0() { return cCdEnumLiteralDeclaration_0; }
		
		public Keyword getCdCdKeyword_0_0() { return cCdCdKeyword_0_0; }
		
		//C
		public EnumLiteralDeclaration getCEnumLiteralDeclaration_1() { return cCEnumLiteralDeclaration_1; }
		
		public Keyword getCCKeyword_1_0() { return cCCKeyword_1_0; }
	}
	public class TIMEElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.smartcitymodel.Dsl.TIME");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cSEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cSSKeyword_0_0 = (Keyword)cSEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMMKeyword_1_0 = (Keyword)cMEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cHEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cHHKeyword_2_0 = (Keyword)cHEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cDEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cDDKeyword_3_0 = (Keyword)cDEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum TIME: s | m | h | d;
		public EnumRule getRule() { return rule; }
		
		//s | m | h | d
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//s
		public EnumLiteralDeclaration getSEnumLiteralDeclaration_0() { return cSEnumLiteralDeclaration_0; }
		
		public Keyword getSSKeyword_0_0() { return cSSKeyword_0_0; }
		
		//m
		public EnumLiteralDeclaration getMEnumLiteralDeclaration_1() { return cMEnumLiteralDeclaration_1; }
		
		public Keyword getMMKeyword_1_0() { return cMMKeyword_1_0; }
		
		//h
		public EnumLiteralDeclaration getHEnumLiteralDeclaration_2() { return cHEnumLiteralDeclaration_2; }
		
		public Keyword getHHKeyword_2_0() { return cHHKeyword_2_0; }
		
		//d
		public EnumLiteralDeclaration getDEnumLiteralDeclaration_3() { return cDEnumLiteralDeclaration_3; }
		
		public Keyword getDDKeyword_3_0() { return cDDKeyword_3_0; }
	}
	public class ACCESSElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "org.smartcitymodel.Dsl.ACCESS");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cREnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cRRKeyword_0_0 = (Keyword)cREnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cWEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cWWKeyword_1_0 = (Keyword)cWEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cRwEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cRwRwKeyword_2_0 = (Keyword)cRwEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum ACCESS: r | w | rw;
		public EnumRule getRule() { return rule; }
		
		//r | w | rw
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//r
		public EnumLiteralDeclaration getREnumLiteralDeclaration_0() { return cREnumLiteralDeclaration_0; }
		
		public Keyword getRRKeyword_0_0() { return cRRKeyword_0_0; }
		
		//w
		public EnumLiteralDeclaration getWEnumLiteralDeclaration_1() { return cWEnumLiteralDeclaration_1; }
		
		public Keyword getWWKeyword_1_0() { return cWWKeyword_1_0; }
		
		//rw
		public EnumLiteralDeclaration getRwEnumLiteralDeclaration_2() { return cRwEnumLiteralDeclaration_2; }
		
		public Keyword getRwRwKeyword_2_0() { return cRwRwKeyword_2_0; }
	}
	
	private final SmartCityModelElements pSmartCityModel;
	private final EntityElements pEntity;
	private final SensorElements pSensor;
	private final ActorElements pActor;
	private final ControllerElements pController;
	private final CompoundEntityElements pCompoundEntity;
	private final PropertyElements pProperty;
	private final PortElements pPort;
	private final LocationElements pLocation;
	private final FrequencyElements pFrequency;
	private final ActionElements pAction;
	private final StatementElements pStatement;
	private final ConditionalStatementElements pConditionalStatement;
	private final ConditionElements pCondition;
	private final EffectElements pEffect;
	private final ExpressionElements pExpression;
	private final ValueExpressionElements pValueExpression;
	private final ServiceElements pService;
	private final ConnectionElements pConnection;
	private final PortFQNElements pPortFQN;
	private final PropertyFQNElements pPropertyFQN;
	private final DIRECTIONElements eDIRECTION;
	private final TYPEElements eTYPE;
	private final UNITElements eUNIT;
	private final TIMEElements eTIME;
	private final ACCESSElements eACCESS;
	private final FLOATElements pFLOAT;
	private final BOOLEANElements pBOOLEAN;
	private final TerminalRule tCOMP;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public DslGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSmartCityModel = new SmartCityModelElements();
		this.pEntity = new EntityElements();
		this.pSensor = new SensorElements();
		this.pActor = new ActorElements();
		this.pController = new ControllerElements();
		this.pCompoundEntity = new CompoundEntityElements();
		this.pProperty = new PropertyElements();
		this.pPort = new PortElements();
		this.pLocation = new LocationElements();
		this.pFrequency = new FrequencyElements();
		this.pAction = new ActionElements();
		this.pStatement = new StatementElements();
		this.pConditionalStatement = new ConditionalStatementElements();
		this.pCondition = new ConditionElements();
		this.pEffect = new EffectElements();
		this.pExpression = new ExpressionElements();
		this.pValueExpression = new ValueExpressionElements();
		this.pService = new ServiceElements();
		this.pConnection = new ConnectionElements();
		this.pPortFQN = new PortFQNElements();
		this.pPropertyFQN = new PropertyFQNElements();
		this.eDIRECTION = new DIRECTIONElements();
		this.eTYPE = new TYPEElements();
		this.eUNIT = new UNITElements();
		this.eTIME = new TIMEElements();
		this.eACCESS = new ACCESSElements();
		this.pFLOAT = new FLOATElements();
		this.pBOOLEAN = new BOOLEANElements();
		this.tCOMP = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.smartcitymodel.Dsl.COMP");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.smartcitymodel.Dsl".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	///*
	// * TODO: add scoping for Port references
	// * TODO: add validation for Port references (source must be out, target must be in, units and types must be the identical)
	// * TODO: add scoping for ports in actions
	// *             - checked ports (values) need to be input ports, set values need to be output ports
	// *          - set ports (values) need to be output ports
	// * TODO: all kinds of validations for conditions
	// * TODO: all kinds of validation for expressions
	// * TODO: all kinds of validations for effects
	// * TODO: all kinds of validation for properties and their usage
	// *             - i.e., read or write
	// * TODO: add scoping for properties
	// */
	//SmartCityModel:
	//    (entities+=Entity)*
	//    (connections+=Connection)*
	//;
	public SmartCityModelElements getSmartCityModelAccess() {
		return pSmartCityModel;
	}
	
	public ParserRule getSmartCityModelRule() {
		return getSmartCityModelAccess().getRule();
	}
	
	//Entity:
	//    Sensor | Actor | Controller | CompoundEntity;
	public EntityElements getEntityAccess() {
		return pEntity;
	}
	
	public ParserRule getEntityRule() {
		return getEntityAccess().getRule();
	}
	
	//Sensor:
	//    'sensor' name=ID '{'
	//        (properties+=Property)*
	//        (ports+=Port)+
	//        (frequency=Frequency)?
	//        location=Location
	//    '}';
	public SensorElements getSensorAccess() {
		return pSensor;
	}
	
	public ParserRule getSensorRule() {
		return getSensorAccess().getRule();
	}
	
	//Actor:
	//    'actor' name=ID '{'
	//        (properties+=Property)*
	//        (ports+=Port)+
	//        (actions+=Action)*
	//        location=Location
	//    '}'
	//;
	public ActorElements getActorAccess() {
		return pActor;
	}
	
	public ParserRule getActorRule() {
		return getActorAccess().getRule();
	}
	
	//Controller:
	//    'controller' name=ID '{'
	//        (properties+=Property)*
	//        (ports+=Port)+
	//        (actions+=Action)*
	//        (services+=Service)*
	//        location=Location
	//    '}'
	//;
	public ControllerElements getControllerAccess() {
		return pController;
	}
	
	public ParserRule getControllerRule() {
		return getControllerAccess().getRule();
	}
	
	//CompoundEntity:
	//    'structure' name=ID '{'
	//        (sensors+=Sensor)*
	//        (actors+=Actor)*
	//    '}'
	//;
	public CompoundEntityElements getCompoundEntityAccess() {
		return pCompoundEntity;
	}
	
	public ParserRule getCompoundEntityRule() {
		return getCompoundEntityAccess().getRule();
	}
	
	//Property:
	//    'property' name=ID '{'
	//        type=TYPE
	//        access=ACCESS
	//    '}'
	//;
	public PropertyElements getPropertyAccess() {
		return pProperty;
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}
	
	//Port:
	//    'port' id=INT '{'
	//        'direction' direction=DIRECTION
	//        'type' type=TYPE
	//        'unit' unit=UNIT
	//    '}'
	//;
	public PortElements getPortAccess() {
		return pPort;
	}
	
	public ParserRule getPortRule() {
		return getPortAccess().getRule();
	}
	
	//Location:
	//    'location' '{'
	//        'longitude' longitude=FLOAT 'degrees'
	//        'latitude' latitude=FLOAT 'degrees'
	//        'altitude' altitude=FLOAT 'meters'
	//    '}'
	//;
	public LocationElements getLocationAccess() {
		return pLocation;
	}
	
	public ParserRule getLocationRule() {
		return getLocationAccess().getRule();
	}
	
	//// -1 means values are pushed, other pulled at specified interval after start
	//Frequency:
	//    'frequency' '{'
	//        'every' value=INT unit=TIME
	//    '}'
	//;
	public FrequencyElements getFrequencyAccess() {
		return pFrequency;
	}
	
	public ParserRule getFrequencyRule() {
		return getFrequencyAccess().getRule();
	}
	
	//// specifies internal behavior
	//Action:
	//    'action' name=ID '{'
	//        (stmts+=Statement)+
	//    '}'
	//;
	public ActionElements getActionAccess() {
		return pAction;
	}
	
	public ParserRule getActionRule() {
		return getActionAccess().getRule();
	}
	
	//Statement:
	//    ConditionalStatement
	//;
	public StatementElements getStatementAccess() {
		return pStatement;
	}
	
	public ParserRule getStatementRule() {
		return getStatementAccess().getRule();
	}
	
	//ConditionalStatement:
	//    "if" condition=Condition 'then' effect=Effect';'
	//;
	public ConditionalStatementElements getConditionalStatementAccess() {
		return pConditionalStatement;
	}
	
	public ParserRule getConditionalStatementRule() {
		return getConditionalStatementAccess().getRule();
	}
	
	//Condition:
	//     target=PortFQN|PropertyFQN COMP expr=(PortFQN|Expression)
	//;
	public ConditionElements getConditionAccess() {
		return pCondition;
	}
	
	public ParserRule getConditionRule() {
		return getConditionAccess().getRule();
	}
	
	//Effect:
	//    'set' target=PortFQN|PropertyFQN 'to' expr=Expression
	//;
	public EffectElements getEffectAccess() {
		return pEffect;
	}
	
	public ParserRule getEffectRule() {
		return getEffectAccess().getRule();
	}
	
	//Expression:
	//    ValueExpression
	//;
	public ExpressionElements getExpressionAccess() {
		return pExpression;
	}
	
	public ParserRule getExpressionRule() {
		return getExpressionAccess().getRule();
	}
	
	//ValueExpression:
	//    INT|FLOAT|STRING|BOOLEAN
	//;
	public ValueExpressionElements getValueExpressionAccess() {
		return pValueExpression;
	}
	
	public ParserRule getValueExpressionRule() {
		return getValueExpressionAccess().getRule();
	}
	
	//// specifies external API calls
	//Service:
	//    'service' name=ID '{'
	//        // input
	//        //how to specify services - and who offers these`?
	//    '}'
	//;
	public ServiceElements getServiceAccess() {
		return pService;
	}
	
	public ParserRule getServiceRule() {
		return getServiceAccess().getRule();
	}
	
	//Connection:
	//    'connection' name =ID '{'
	//        sourceRef=PortFQN '->' targetRef=PortFQN
	//    '}'
	//;
	public ConnectionElements getConnectionAccess() {
		return pConnection;
	}
	
	public ParserRule getConnectionRule() {
		return getConnectionAccess().getRule();
	}
	
	//PortFQN hidden():
	//    ID('::'INT | '::'ID'::'INT)
	//;
	public PortFQNElements getPortFQNAccess() {
		return pPortFQN;
	}
	
	public ParserRule getPortFQNRule() {
		return getPortFQNAccess().getRule();
	}
	
	//PropertyFQN hidden():
	//    ID('::'ID | '::'ID'::'ID)
	//;
	public PropertyFQNElements getPropertyFQNAccess() {
		return pPropertyFQN;
	}
	
	public ParserRule getPropertyFQNRule() {
		return getPropertyFQNAccess().getRule();
	}
	
	//enum DIRECTION: in | out;
	public DIRECTIONElements getDIRECTIONAccess() {
		return eDIRECTION;
	}
	
	public EnumRule getDIRECTIONRule() {
		return getDIRECTIONAccess().getRule();
	}
	
	//enum TYPE: float | integer | string | bool;
	public TYPEElements getTYPEAccess() {
		return eTYPE;
	}
	
	public EnumRule getTYPERule() {
		return getTYPEAccess().getRule();
	}
	
	//enum UNIT: cd | C;
	public UNITElements getUNITAccess() {
		return eUNIT;
	}
	
	public EnumRule getUNITRule() {
		return getUNITAccess().getRule();
	}
	
	//enum TIME: s | m | h | d;
	public TIMEElements getTIMEAccess() {
		return eTIME;
	}
	
	public EnumRule getTIMERule() {
		return getTIMEAccess().getRule();
	}
	
	//enum ACCESS: r | w | rw;
	public ACCESSElements getACCESSAccess() {
		return eACCESS;
	}
	
	public EnumRule getACCESSRule() {
		return getACCESSAccess().getRule();
	}
	
	//FLOAT returns ecore::EFloat: INT '.' INT;
	public FLOATElements getFLOATAccess() {
		return pFLOAT;
	}
	
	public ParserRule getFLOATRule() {
		return getFLOATAccess().getRule();
	}
	
	//BOOLEAN returns ecore::EBoolean: 'true' | 'false';
	public BOOLEANElements getBOOLEANAccess() {
		return pBOOLEAN;
	}
	
	public ParserRule getBOOLEANRule() {
		return getBOOLEANAccess().getRule();
	}
	
	//terminal COMP : '<' | '=' | '>' ;
	public TerminalRule getCOMPRule() {
		return tCOMP;
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
