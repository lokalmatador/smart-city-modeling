grammar org.smartcitymodel.Dsl with org.eclipse.xtext.common.Terminals

import "http://www.eclipse.org/emf/2002/Ecore" as ecore

generate dsl "http://www.smartcitymodel.org/Dsl"

/*
 * TODO: add scoping for Port references
 * TODO: add validation for Port references (source must be out, target must be in, units and types must be the identical)
 * TODO: add scoping for ports in actions
 * 			- checked ports (values) need to be input ports, set values need to be output ports
 *  		- set ports (values) need to be output ports
 * TODO: all kinds of validations for conditions
 * TODO: all kinds of validation for expressions
 * TODO: all kinds of validations for effects
 * TODO: all kinds of validation for properties and their usage
 * 			- i.e., read or write
 * TODO: add scoping for properties
 */

SmartCityModel:
	(entities+=Entity)*
	(connections+=Connection)*
;
	
Entity:
    Sensor | Actor | Controller | CompoundEntity;
    
Sensor:
	'sensor' name=ID '{'
		(properties+=Property)*
		(ports+=Port)+	
		(frequency=Frequency)?						
		location=Location
	'}';

Actor:
	'actor' name=ID '{'
		(properties+=Property)*
		(ports+=Port)+
		(actions+=Action)*	
		location=Location
	'}'
;

Controller:
	'controller' name=ID '{'
		(properties+=Property)*
		(ports+=Port)+
		(actions+=Action)*
		(services+=Service)*
		location=Location
	'}'
;

CompoundEntity:
	'structure' name=ID '{'
		(sensors+=Sensor)*
		(actors+=Actor)*
	'}'
;

Property:
	'property' name=ID '{'
		type=TYPE
		access=ACCESS
	'}'
;
	
Port:
	'port' id=INT '{'
		'direction' direction=DIRECTION
		'type' type=TYPE
		'unit' unit=UNIT
	'}'
;

Location:
	'location' '{'
		'longitude' longitude=FLOAT 'degrees'
		'latitude' latitude=FLOAT 'degrees'
		'altitude' altitude=FLOAT 'meters'
	'}'
;

// -1 means values are pushed, other pulled at specified interval after start
Frequency:
	'frequency' '{'
		'every' value=INT unit=TIME
	'}'
;

// specifies internal behavior
Action:
	'action' name=ID '{'
		(stmts+=Statement)+
	'}'
;

Statement:
	ConditionalStatement
;

ConditionalStatement:
    "if" condition=Condition 'then' effect=Effect';'
;

Condition:
     target=PortFQN|PropertyFQN COMP expr=(PortFQN|Expression)
;

Effect:
    'set' target=PortFQN|PropertyFQN 'to' expr=Expression
;

Expression:
	ValueExpression
;

ValueExpression:
	INT|FLOAT|STRING|BOOLEAN
;

// specifies external API calls
Service:
	'service' name=ID '{'
		// input
		//how to specify services - and who offers these`?
	'}'
;

Connection:
	'connection' name =ID '{'
		sourceRef=PortFQN '->' targetRef=PortFQN
	'}'
;

PortFQN hidden(): 
	ID('::'INT | '::'ID'::'INT)
;

PropertyFQN hidden(): 
	ID('::'ID | '::'ID'::'ID)
;


enum DIRECTION: in | out;
enum TYPE: float | integer | string | bool;
enum UNIT: cd | C;
enum TIME: s | m | h | d;
enum ACCESS: r | w | rw;
FLOAT returns ecore::EFloat: INT '.' INT;
BOOLEAN returns ecore::EBoolean: 'true' | 'false';
terminal COMP : '<' | '=' | '>' ;