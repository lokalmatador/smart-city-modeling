/*
 * generated by Xtext 2.36.0
 */
package org.smartcitymodel.ide.contentassist.antlr;

import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.smartcitymodel.ide.contentassist.antlr.internal.InternalDslParser;
import org.smartcitymodel.services.DslGrammarAccess;

public class DslParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(DslGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, DslGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getEntityAccess().getAlternatives(), "rule__Entity__Alternatives");
			builder.put(grammarAccess.getConditionAccess().getAlternatives(), "rule__Condition__Alternatives");
			builder.put(grammarAccess.getConditionAccess().getExprAlternatives_1_2_0(), "rule__Condition__ExprAlternatives_1_2_0");
			builder.put(grammarAccess.getEffectAccess().getAlternatives(), "rule__Effect__Alternatives");
			builder.put(grammarAccess.getValueExpressionAccess().getAlternatives(), "rule__ValueExpression__Alternatives");
			builder.put(grammarAccess.getPortFQNAccess().getAlternatives_1(), "rule__PortFQN__Alternatives_1");
			builder.put(grammarAccess.getPropertyFQNAccess().getAlternatives_1(), "rule__PropertyFQN__Alternatives_1");
			builder.put(grammarAccess.getBOOLEANAccess().getAlternatives(), "rule__BOOLEAN__Alternatives");
			builder.put(grammarAccess.getDIRECTIONAccess().getAlternatives(), "rule__DIRECTION__Alternatives");
			builder.put(grammarAccess.getTYPEAccess().getAlternatives(), "rule__TYPE__Alternatives");
			builder.put(grammarAccess.getUNITAccess().getAlternatives(), "rule__UNIT__Alternatives");
			builder.put(grammarAccess.getTIMEAccess().getAlternatives(), "rule__TIME__Alternatives");
			builder.put(grammarAccess.getACCESSAccess().getAlternatives(), "rule__ACCESS__Alternatives");
			builder.put(grammarAccess.getSmartCityModelAccess().getGroup(), "rule__SmartCityModel__Group__0");
			builder.put(grammarAccess.getSensorAccess().getGroup(), "rule__Sensor__Group__0");
			builder.put(grammarAccess.getActorAccess().getGroup(), "rule__Actor__Group__0");
			builder.put(grammarAccess.getControllerAccess().getGroup(), "rule__Controller__Group__0");
			builder.put(grammarAccess.getCompoundEntityAccess().getGroup(), "rule__CompoundEntity__Group__0");
			builder.put(grammarAccess.getPropertyAccess().getGroup(), "rule__Property__Group__0");
			builder.put(grammarAccess.getPortAccess().getGroup(), "rule__Port__Group__0");
			builder.put(grammarAccess.getLocationAccess().getGroup(), "rule__Location__Group__0");
			builder.put(grammarAccess.getFrequencyAccess().getGroup(), "rule__Frequency__Group__0");
			builder.put(grammarAccess.getActionAccess().getGroup(), "rule__Action__Group__0");
			builder.put(grammarAccess.getConditionalStatementAccess().getGroup(), "rule__ConditionalStatement__Group__0");
			builder.put(grammarAccess.getConditionAccess().getGroup_1(), "rule__Condition__Group_1__0");
			builder.put(grammarAccess.getEffectAccess().getGroup_0(), "rule__Effect__Group_0__0");
			builder.put(grammarAccess.getEffectAccess().getGroup_1(), "rule__Effect__Group_1__0");
			builder.put(grammarAccess.getServiceAccess().getGroup(), "rule__Service__Group__0");
			builder.put(grammarAccess.getConnectionAccess().getGroup(), "rule__Connection__Group__0");
			builder.put(grammarAccess.getPortFQNAccess().getGroup(), "rule__PortFQN__Group__0");
			builder.put(grammarAccess.getPortFQNAccess().getGroup_1_0(), "rule__PortFQN__Group_1_0__0");
			builder.put(grammarAccess.getPortFQNAccess().getGroup_1_1(), "rule__PortFQN__Group_1_1__0");
			builder.put(grammarAccess.getPropertyFQNAccess().getGroup(), "rule__PropertyFQN__Group__0");
			builder.put(grammarAccess.getPropertyFQNAccess().getGroup_1_0(), "rule__PropertyFQN__Group_1_0__0");
			builder.put(grammarAccess.getPropertyFQNAccess().getGroup_1_1(), "rule__PropertyFQN__Group_1_1__0");
			builder.put(grammarAccess.getFLOATAccess().getGroup(), "rule__FLOAT__Group__0");
			builder.put(grammarAccess.getSmartCityModelAccess().getEntitiesAssignment_0(), "rule__SmartCityModel__EntitiesAssignment_0");
			builder.put(grammarAccess.getSmartCityModelAccess().getConnectionsAssignment_1(), "rule__SmartCityModel__ConnectionsAssignment_1");
			builder.put(grammarAccess.getSensorAccess().getNameAssignment_1(), "rule__Sensor__NameAssignment_1");
			builder.put(grammarAccess.getSensorAccess().getPropertiesAssignment_3(), "rule__Sensor__PropertiesAssignment_3");
			builder.put(grammarAccess.getSensorAccess().getPortsAssignment_4(), "rule__Sensor__PortsAssignment_4");
			builder.put(grammarAccess.getSensorAccess().getFrequencyAssignment_5(), "rule__Sensor__FrequencyAssignment_5");
			builder.put(grammarAccess.getSensorAccess().getLocationAssignment_6(), "rule__Sensor__LocationAssignment_6");
			builder.put(grammarAccess.getActorAccess().getNameAssignment_1(), "rule__Actor__NameAssignment_1");
			builder.put(grammarAccess.getActorAccess().getPropertiesAssignment_3(), "rule__Actor__PropertiesAssignment_3");
			builder.put(grammarAccess.getActorAccess().getPortsAssignment_4(), "rule__Actor__PortsAssignment_4");
			builder.put(grammarAccess.getActorAccess().getActionsAssignment_5(), "rule__Actor__ActionsAssignment_5");
			builder.put(grammarAccess.getActorAccess().getLocationAssignment_6(), "rule__Actor__LocationAssignment_6");
			builder.put(grammarAccess.getControllerAccess().getNameAssignment_1(), "rule__Controller__NameAssignment_1");
			builder.put(grammarAccess.getControllerAccess().getPropertiesAssignment_3(), "rule__Controller__PropertiesAssignment_3");
			builder.put(grammarAccess.getControllerAccess().getPortsAssignment_4(), "rule__Controller__PortsAssignment_4");
			builder.put(grammarAccess.getControllerAccess().getActionsAssignment_5(), "rule__Controller__ActionsAssignment_5");
			builder.put(grammarAccess.getControllerAccess().getServicesAssignment_6(), "rule__Controller__ServicesAssignment_6");
			builder.put(grammarAccess.getControllerAccess().getLocationAssignment_7(), "rule__Controller__LocationAssignment_7");
			builder.put(grammarAccess.getCompoundEntityAccess().getNameAssignment_1(), "rule__CompoundEntity__NameAssignment_1");
			builder.put(grammarAccess.getCompoundEntityAccess().getSensorsAssignment_3(), "rule__CompoundEntity__SensorsAssignment_3");
			builder.put(grammarAccess.getCompoundEntityAccess().getActorsAssignment_4(), "rule__CompoundEntity__ActorsAssignment_4");
			builder.put(grammarAccess.getPropertyAccess().getNameAssignment_1(), "rule__Property__NameAssignment_1");
			builder.put(grammarAccess.getPropertyAccess().getTypeAssignment_3(), "rule__Property__TypeAssignment_3");
			builder.put(grammarAccess.getPropertyAccess().getAccessAssignment_4(), "rule__Property__AccessAssignment_4");
			builder.put(grammarAccess.getPortAccess().getIdAssignment_1(), "rule__Port__IdAssignment_1");
			builder.put(grammarAccess.getPortAccess().getDirectionAssignment_4(), "rule__Port__DirectionAssignment_4");
			builder.put(grammarAccess.getPortAccess().getTypeAssignment_6(), "rule__Port__TypeAssignment_6");
			builder.put(grammarAccess.getPortAccess().getUnitAssignment_8(), "rule__Port__UnitAssignment_8");
			builder.put(grammarAccess.getLocationAccess().getLongitudeAssignment_3(), "rule__Location__LongitudeAssignment_3");
			builder.put(grammarAccess.getLocationAccess().getLatitudeAssignment_6(), "rule__Location__LatitudeAssignment_6");
			builder.put(grammarAccess.getLocationAccess().getAltitudeAssignment_9(), "rule__Location__AltitudeAssignment_9");
			builder.put(grammarAccess.getFrequencyAccess().getValueAssignment_3(), "rule__Frequency__ValueAssignment_3");
			builder.put(grammarAccess.getFrequencyAccess().getUnitAssignment_4(), "rule__Frequency__UnitAssignment_4");
			builder.put(grammarAccess.getActionAccess().getNameAssignment_1(), "rule__Action__NameAssignment_1");
			builder.put(grammarAccess.getActionAccess().getStmtsAssignment_3(), "rule__Action__StmtsAssignment_3");
			builder.put(grammarAccess.getConditionalStatementAccess().getConditionAssignment_1(), "rule__ConditionalStatement__ConditionAssignment_1");
			builder.put(grammarAccess.getConditionalStatementAccess().getEffectAssignment_3(), "rule__ConditionalStatement__EffectAssignment_3");
			builder.put(grammarAccess.getConditionAccess().getTargetAssignment_0(), "rule__Condition__TargetAssignment_0");
			builder.put(grammarAccess.getConditionAccess().getExprAssignment_1_2(), "rule__Condition__ExprAssignment_1_2");
			builder.put(grammarAccess.getEffectAccess().getTargetAssignment_0_1(), "rule__Effect__TargetAssignment_0_1");
			builder.put(grammarAccess.getEffectAccess().getExprAssignment_1_2(), "rule__Effect__ExprAssignment_1_2");
			builder.put(grammarAccess.getServiceAccess().getNameAssignment_1(), "rule__Service__NameAssignment_1");
			builder.put(grammarAccess.getConnectionAccess().getNameAssignment_1(), "rule__Connection__NameAssignment_1");
			builder.put(grammarAccess.getConnectionAccess().getSourceRefAssignment_3(), "rule__Connection__SourceRefAssignment_3");
			builder.put(grammarAccess.getConnectionAccess().getTargetRefAssignment_5(), "rule__Connection__TargetRefAssignment_5");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private DslGrammarAccess grammarAccess;

	@Override
	protected InternalDslParser createParser() {
		InternalDslParser result = new InternalDslParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public DslGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(DslGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
